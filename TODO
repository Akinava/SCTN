# rebuild and run project in local containers
docker-compose -f ./docker/docker-compose.yml up --build

# build image
docker build -f docker/Dockerfile -t sctn:v0 .

# build and run container interactive
docker run -it sctn:v0

# start container interactive
docker start -i sctn_0

# run client local
python3 test/test_peer.py -p tmp/peers1.json -c tmp/config1.json -s tmp/shadow1
python3 test/test_peer.py -p tmp/peers2.json -c tmp/config2.json -s tmp/shadow2
python3 test/test_peer.py -p tmp/peers3.json -c tmp/config3.json -s tmp/shadow3

# run server local
python3 src/server_host.py -c docker/config.json -s docker/shadow

TODO
check peer_connections and init test client
move hpn_common to lib
dockerise
servers_timeout_days setter
test server disconnect
test connect via client


# docker
h: export hpnc_instance=3
h: docker pull python:3-alpine
h: docker run -it --name=hpnc${hpnc_instance} python:3-alpine /bin/sh

d: mkdir -p /usr/src/hpnc/src
d: mkdir -p /usr/src/hpnc/test
d: apk add g++
d: apk add git
d: /usr/local/bin/python3 -m pip install --upgrade pip

h: docker cp requirements.txt hpnc${hpnc_instance}:/usr/src/hpnc/requirements.txt
h: for f in $(ls src); do echo $f; docker cp src/${f} hpnc${hpnc_instance}:/usr/src/hpnc/src; done
h: for f in $(ls ../hpn_common/src/); do echo $f; docker cp ../hpn_common/src/${f} hpnc${hpnc_instance}:/usr/src/hpnc/src; done
h: docker cp test/test_peer.py hpnc${hpnc_instance}:/usr/src/hpnc/test/test_peer.py
h: docker cp tmp/peers.json hpnc${hpnc_instance}:/usr/src/hpnc/peers.json
h: docker cp tmp/config1.json hpnc${hpnc_instance}:/usr/src/hpnc/config.json

d: pip install -r /usr/src/hpnc/requirements.txt
d: python3 /usr/src/hpnc/test/test_peer.py -p /usr/src/hpnc/peers.json -c /usr/src/hpnc/config.json -s /usr/src/hpnc/shadow
==============
h: docker run -it --name=hpnc1 --volume $(pwd):/usr/src/app hpnc:dev /bin/sh
d: python3 /usr/src/app/test/test_peer.py -p /usr/src/app/tmp/peers.json -c /usr/src/app/tmp/config1.json -s /usr/src/app/tmp/shadow

docker diff hpnc
docker export hpnc -o hpnc

docker commit hpnc

==============

h: docker run -it --name=hpnc --volume $(pwd):/usr/src/app python:3-alpine /bin/sh
d: apk add g++
d: apk add git
d: /usr/local/bin/python3 -m pip install --upgrade pip
d: pip install -r /usr/src/app/requirements.txt

h: docker commit hpnc
h: docker tag 09ffc1f3baa8 hpnc:dev

docker run -it --volume $(pwd):/usr/src/app --name=hpnc1 hpnc:dev /usr/src/app/tmp/run_app.sh

# start client in docker
docker start -i hpnc1
# start server
python3 src/server_host.py -c docker/config.json -s docker/shadow | tee /Users/akinava/Projects/hpn_client/logs/hpnc_server.log

==============
# AWS
ssh ubuntu@52.59.255.252 -i main.pem

python3 src/server_host.py -c docker/config.json -s docker/shadow
python3 test/test_peer.py -p docker/peers.json -c docker/config.json -s docker/shadow

sudo apt update
sudo apt upgrade
sudo apt install python3-pip
echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" >> $HOME/.bashrc
echo "export PATH=\$PATH:\$HOME/.local/bin" >> $HOME/.bashrc
echo "export WORKON_HOME=\$HOME/Project" >> $HOME/.bashrc
echo "source \$HOME/.local/bin/virtualenvwrapper.sh" >> $HOME/.bashrc
pip3 install virtualenv
pip3 install virtualenvwrapper
source ~/.bashrc
mkdir $HOME/Project
cd Project

git clone https://github.com/Akinava/hpn_common.git
git clone https://github.com/Akinava/hpn_server.git
git clone https://github.com/Akinava/hpn_client.git

# route
router1 172.31.40.144
client1 172.31.44.234
# set client route
sudo ip route add default via 172.31.40.144
# set route NAT
sudo -s
echo "1" > /proc/sys/net/ipv4/ip_forward
iptables --flush
iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE --random

==============

import traceback
traceback.print_stack()


!!! check client via another net
make swarm via client
move hpn_common to lib
make hpn_client as a lib


==============

apt update
apt upgrade
apt install iptables tcpdump net-tools

docker image pull ubuntu:latest

docker network create local-network
docker run -ti --name client1 --entrypoint /bin/bash ubuntu
docker network connect local-network client1

docker network inspect local-network


Full Cone NAT;
iptables -t nat -A POSTROUTING -o eth1 -j SNAT --to-source "public IP"
iptables -t nat -A PREROUTING -i eth1 -j DNAT --to-destination "private IP"

Restricted Cone NAT;
iptables -t nat -A POSTROUTING -o eth1 -p udp -j SNAT --to-source "public IP"
iptables -t nat -A PREROUTING -i eth1 -p udp -j DNAT --to-destination "private IP"
iptables -A INPUT -i eth1 -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -i eth1 -p udp -m state --state NEW -j DROP

Port Restricted Cone NAT;
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source "public IP"

Symmetric NAT;
echo "1" > /proc/sys/net/ipv4/ip_forward
iptables --flush
iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE --random
iptables -A FORWARD -i eth1 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT

eth1 - inet
eth0 - local